// SPDSample

//--------------------------------------------------------------------------------------
// Constant Buffer
//--------------------------------------------------------------------------------------
cbuffer cbPerFrame : register(b0)
{
    float2 u_outSize; //目标 mip 的尺寸
    float2 u_invSize; //源 mip 尺寸的倒数
}

//--------------------------------------------------------------------------------------
// I/O Structures
//--------------------------------------------------------------------------------------
struct VERTEX
{
    float2 vTexcoord : TEXCOORD;
};

//--------------------------------------------------------------------------------------
// Texture definitions
//--------------------------------------------------------------------------------------
Texture2D        inputTex         :register(t0);    //当前作为“源”的 mip
SamplerState     samLinear        :register(s0);

//--------------------------------------------------------------------------------------
// Main function
//--------------------------------------------------------------------------------------

float4 mainPS(VERTEX Input) : SV_Target
{
    // as compute shader solution
    float2 texCoord = Input.vTexcoord * u_outSize;  //得到在输出纹理上的位置
    texCoord = texCoord * u_invSize * 2.0;          //映射到输入纹理上[0-1] 
    return inputTex.Sample(samLinear, texCoord); //恰好落在源纹理中 2×2 像素块的中心点，由于采样器是线性滤波且 MIP 选择是 point（不跨 mip），在这个“2×2块中心”采样会对四个相邻像素以 0.25 权重各取一次并线性混合，正好等价于2×2平均。
}
